/*! \page coding_standards Coding Standards

\section CS_follow_Qt Follow Qt coding style

<em>In general</em>, follow what is written in these documents
    - http://qt.gitorious.org/qt/pages/QtCodingStyle
    - http://techbase.kde.org/Policies
    - http://techbase.kde.org/Policies/Kdelibs_Coding_Style
    - http://techbase.kde.org/Policies/Library_Code_Policy

\section CS_80 Line length and whitespaces

    - Line length
        - strictly under 80
    - Indenting
        - use 4 SPACEs instead of TABs

\section CS_includes Include sequence

    -# Associated header file (when ClassABC.cpp includes ClassABC.hpp ...)
    -# Qt headers
    -# Other system headers
    -# FormDesigner's own headers

\section CS_class_decl Class declarations

Always try to keep this (multicriterial) sorting of member declarations:

    -# By visibility
        -# \c public members
        -# \c protected members
        -# \c private members
    -# By type
        -# \c QObject/PIMPL macros
        -# Type declarations
        -# Static variables and constants
        -# *structors
        -# Static functions
        -# Acces functions
        -# (General) functions
        -# Virtual functions
        -# \c Q_SLOTS
        -# \c Q_SIGNALS
        -# Variables

There are exceptions, of course.. (but..)

Look at the example \c cMyClass declaration. Notice the use of visibility 
labels (\c public, \c protected, \c private) to express some kind of relation 
between members (or from the other side to separate this sets of members 
visually).

\code
class cMyClass : public QObject
{
    Q_OBJECT
    PIMPL_DECLARE_PRIVATE()
    // Other QObject/PIMPL macros
    // ...

public:
    typedef ...;

    class ...
    {
        ...
    };

    enum ...
    {
    };

    // Other nested type declarations
    // ...

public:
    static const ...;
    // Other static variables/constants
    // ...

public:
    cMyClass(QObject parent = 0);
    ~cMyClass();

public:
    static void s1();
    // Other static member functions

public:
    int a() const;
    void setA(int a) const;

    int b() const;

public:
    virtual void f();

protected:
    void g();

protected:
    virtual int computeB() = 0;

private:
    void h();

private:
    int p_a;
};
\endcode

\section CS_reimpl Document member functions reimplementations

Use this when reimplement some member function:

\verbatim
class MyWidget : public QWidget
{
    // ...

public:
    //! \reimpl QObject
    //@{
    virtual bool eventFilter(QObject *watched, QEvent *event);
    //@}

protected:
    //! \reimpl QWidget
    //@{
    virtual void paintEvent(QPaintEvent *event);
    virtual void mouseMoveEvent(QMouseEvent *event);
    //@}

    // ...
};
\endverbatim

\section CS_qtkeywords Do NOT use Qt keywords

Use \c Q_EMIT, \c Q_FOREACH, ..., instead of \c emit, \c foreach, \c slots, \c 
signals, etc.

\section CS_enums Enumerators in CamelCase

\code
Color { ColorRed, ColorGreen, ColorBlue,
        COLORS_COUNT };
\endcode

\section CS_pimpl Use PIMPL implicitly

\see src/tools/PIMPL.hpp

\par Remember

    - keep "public constructor" minimal. Keep maximum of the construction code 
        in the "private constructor"!
    - do NOT create any private members in a "public class"!
    - you are allowed to create protected members in a "public class" ONLY IF 
        you are realy sure, that there will realy be some child class using it!

\section CS_commens Write comments understandable by Doxygen

\subsection CS_todo How to write a TODO

Assuming that you are known as \em XY ...

    - when you write a TODO to \em yourself
        \code
        //! \todo XY: todo text...
        \endcode
    - when you write a TODO to \em UW
        \code
        //! \todo XY->UW: todo text...
        \endcode

\section CS_params Parameter passing

Follow what is used in Qt.

    - In the case of an <em>IN parameter</em> of some <em>primitive type</em>
        - pass it by <em>value</em>
    - In the case of an <em>IN parameter</em>
        - pass it by <em>const reference</em>
    - In the case of an <em>OUT or IN/OUT parameter</em>
        - pass it by <em>pointer</em>


\section CS_assert Use assertions

..let the things fall as soon as possible

\code
Q_ASSERT(param != 0);
\endcode

\section CS_resources Resource files

Due to filename conflict, always use filename with namespace prefix (use '.' as 
namespace separator).

\code
    mva.project.icons.qrc
\endcode

Use full namespace qualifier also as resource prefix inside qrc file.
Use '/' as separator in this case.

\code
<RCC>
    <qresource prefix="mva/project/icons" >
        <file>ui-file.png</file>
        <file>resource-file.png</file>
    </qresource>
</RCC>
\endcode

\section CS_no_null Never use NULL macro in C++

In C++, there is no NULL. Use \c 0 (zero) instead.

\section CS_snippet Example snippet of code

\code
#include <math.h>

namespace xxx {
namespace yyy {
    class XY;
}}

class Point
{
public:
	Point(double xc, double yc)
        : x(xc)
        , y(yc)
	{
	}

public:
    double distance(const Point& other) const;
	int compareX(const Point& other) const;

private:
    double x;
	double y;
};

double Point::distance(const Point& other) const
{
	double dx = x - other.x;
	double dy = y - other.y;

	return sqrt(dx * dx + dy * dy);
}

int Point::compareX(const Point& other) const
{
    if (x < other.x) {
		return -1;
	}
	else if (x > other.x) {
		return 1;
	}
	else {
		return 0;
	}
}

namespace foo {

int bar(int baz) const
{
	switch (baz)
	{
	case 0:
		++baz;
		break;
	case 1:
		--baz;
	default:
        baz += baz;
		break;
    }
}

} //namespace foo
\endcode


*/
